<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IQ Test - Question <%= currentQuestion %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .test-container {
            padding: 1rem 0;
            min-height: 100vh;
        }
        .test-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            margin-bottom: 1rem;
            padding: 1rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .test-card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            overflow: hidden;
        }
        .question-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1.5rem;
            text-align: center;
        }
        .timer {
            background: #dc3545;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-weight: bold;
            font-size: 1.1rem;
        }
        .timer.warning {
            background: #fd7e14;
            animation: pulse 1s infinite;
        }
        .timer.critical {
            background: #dc3545;
            animation: pulse 0.5s infinite;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        .progress-section {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 10px;
            margin-bottom: 1rem;
        }
        .pattern-container {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 3rem;
            margin: 2rem 0;
            text-align: center;
            min-height: 600px;
        }
        .pattern-grid {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%;
            margin: 0 auto;
            min-height: 500px;
        }
        
        /* Question image styles */
        .question-image-container {
            position: relative;
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        }
        
        .question-image {
            width: 100%;
            height: auto;
            border-radius: 15px;
            display: block;
        }

        /* Options section styles */
        .options-container {
            background: white;
            padding: 2rem;
            border-top: 3px solid #667eea;
        }
        
        .options-title {
            text-align: center;
            color: #333;
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 2rem;
        }
        
        .options-grid {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 15px;
            max-width: 900px;
            margin: 0 auto;
        }
        
        .option-btn {
            aspect-ratio: 1;
            border: 3px solid #dee2e6;
            border-radius: 15px;
            background: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            padding: 10px;
            min-height: 80px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .option-btn:hover {
            border-color: #667eea;
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(102, 126, 234, 0.05) 100%);
        }
        
        .option-btn.selected {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-color: #667eea;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }
        
        .option-label {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 4px;
            color: #333;
        }
        
        .option-btn.selected .option-label {
            color: white;
        }
        
        .option-text {
            font-size: 0.75rem;
            text-align: center;
            opacity: 0.8;
            line-height: 1.2;
        }
        
        .option-btn.selected .option-text {
            color: white;
            opacity: 1;
        }
        
        .navigation-section {
            background: #f8f9fa;
            padding: 1.5rem;
            border-top: 1px solid #dee2e6;
        }
        .btn-nav {
            border-radius: 25px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            min-width: 120px;
        }
        .question-indicator {
            display: inline-block;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 2px solid #dee2e6;
            background: white;
            margin: 2px;
            text-align: center;
            line-height: 26px;
            font-size: 0.8rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .question-indicator.answered {
            background: #28a745;
            color: white;
            border-color: #28a745;
        }
        .question-indicator.current {
            background: #667eea;
            color: white;
            border-color: #667eea;
            transform: scale(1.2);
        }

    </style>
</head>
<body>
    <div class="test-container">
        <div class="container">
            <!-- Test Header -->
            <div class="test-header">
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <h5 class="mb-0">
                            <i class="fas fa-brain me-2"></i>IQ Assessment
                        </h5>
                    </div>
                    <div class="col-md-4 text-center">
                        <div class="timer" id="timer">
                            <i class="fas fa-clock me-2"></i>
                            <span id="timeDisplay">15:00</span>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <span class="badge bg-primary fs-6">
                            Question <span id="currentQuestionNumber"><%= currentQuestion %></span> of 30
                        </span>
                    </div>
                </div>
            </div>

            <!-- Progress Indicators -->
            <div class="progress-section">
                <div class="text-center">
                    <div id="questionIndicators">
                        <!-- Indicators will be generated by JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Test Card -->
            <div class="test-card">
                <div class="question-header">
                    <h4 class="mb-0" id="questionText">Choose the appropriate shape to replace the shape that is missing.</h4>
                </div>

                <!-- Pattern Display - Expanded Full Width -->
                <div class="pattern-container">
                    <div class="pattern-grid" id="patternGrid">
                        <!-- Pattern will be loaded by JavaScript -->
                    </div>
                </div>

                <!-- Answer Options Section -->
                <div class="options-container">
                    <h5 class="options-title">
                        <i class="fas fa-hand-pointer me-2"></i>
                        Choose your answer:
                    </h5>
                    <div class="options-grid" id="optionsGrid">
                        <!-- Options will be loaded by JavaScript -->
                    </div>
                </div>

                <!-- Navigation -->
                <div class="navigation-section">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <button id="prevBtn" class="btn btn-outline-secondary btn-nav me-2" disabled>
                                <i class="fas fa-arrow-left me-2"></i>Previous
                            </button>
                            <button id="nextBtn" class="btn btn-primary btn-nav" disabled>
                                Next<i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                        <div class="col-md-6 text-end">
                            <button id="submitTestBtn" class="btn btn-success btn-nav" style="display: none;">
                                <i class="fas fa-check me-2"></i>Submit Test
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let currentQuestion = <%= currentQuestion %>;
        let answers = <%- JSON.stringify(answers) %>;
        let remainingTime = <%= remainingTime %>;
        let timerInterval;
        let sessionId = <%= sessionId %>;

        // Initialize the test
        document.addEventListener('DOMContentLoaded', function() {
            loadQuestion(currentQuestion);
            generateQuestionIndicators();
            startTimer();
            updateUI();
        });

        // Timer functionality
        function startTimer() {
            timerInterval = setInterval(function() {
                remainingTime--;
                updateTimerDisplay();
                
                if (remainingTime <= 0) {
                    clearInterval(timerInterval);
                    autoSubmitTest();
                }
            }, 1000);
        }

        function updateTimerDisplay() {
            const minutes = Math.floor(remainingTime / 60);
            const seconds = remainingTime % 60;
            const display = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            document.getElementById('timeDisplay').textContent = display;
            
            const timer = document.getElementById('timer');
            if (remainingTime <= 60) {
                timer.className = 'timer critical';
            } else if (remainingTime <= 300) {
                timer.className = 'timer warning';
            }
        }

        // Load question data
        async function loadQuestion(questionNumber) {
            try {
                const response = await fetch(`/api/question/${questionNumber}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const question = await response.json();
                displayQuestion(question);
            } catch (error) {
                console.error('Error loading question:', error);
                // Show error message to user
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger';
                errorDiv.textContent = 'Error loading question. Please refresh the page.';
                document.querySelector('.pattern-container').appendChild(errorDiv);
            }
        }

        // Display question
        function displayQuestion(question) {
            document.getElementById('questionText').textContent = question.question;
            document.getElementById('currentQuestionNumber').textContent = question.number;
            
            // Update page title
            document.title = `IQ Test - Question ${question.number}`;
            
            // Display expanded question image with clickable options
            displayQuestionImage(question);
            
            // Display simple A-F options below the question
            displayOptions(question);
            
            // Update navigation
            updateNavigation();
        }

        // Display expanded question image
        function displayQuestionImage(question) {
            const grid = document.getElementById('patternGrid');
            grid.innerHTML = '';
            
            if (question.questionImage) {
                // Create expanded image container
                const imageContainer = document.createElement('div');
                imageContainer.className = 'question-image-container';
                
                // Create the main IQ test image
                const img = document.createElement('img');
                img.src = `/images/questions/${question.questionImage}`;
                img.alt = `Question ${question.number}`;
                img.className = 'question-image';
                
                // Add error handling
                img.onerror = function() {
                    imageContainer.innerHTML = `
                        <div style="text-align: center; padding: 60px; color: #666;">
                            <i class="fas fa-image" style="font-size: 60px; margin-bottom: 20px;"></i>
                            <p>Image not found: ${question.questionImage}</p>
                        </div>
                    `;
                };
                
                imageContainer.appendChild(img);
                grid.appendChild(imageContainer);
            } else {
                grid.innerHTML = `
                    <div style="text-align: center; padding: 60px; color: #666;">
                        <i class="fas fa-exclamation-triangle" style="font-size: 60px; margin-bottom: 20px;"></i>
                        <p>No image specified for this question</p>
                    </div>
                `;
            }
        }

        // Display simple A-F options below the question
        function displayOptions(question) {
            const optionsContainer = document.getElementById('optionsGrid');
            optionsContainer.innerHTML = '';

            // Create simple A-F options
            const labels = ['A', 'B', 'C', 'D', 'E', 'F'];
            labels.forEach(label => {
                const optionBtn = document.createElement('button');
                optionBtn.className = 'option-btn';
                optionBtn.dataset.option = label;
                
                // Check if this option was previously selected
                if (answers[currentQuestion] === label) {
                    optionBtn.classList.add('selected');
                }
                
                optionBtn.innerHTML = `
                    <div class="option-label">${label}</div>
                    <div class="option-text">Option ${label}</div>
                `;
                
                optionBtn.addEventListener('click', () => selectOption(label));
                optionsContainer.appendChild(optionBtn);
            });
        }

        // Handle option selection
        function selectOption(option) {
            // Remove previous selection from all options
            document.querySelectorAll('.option-btn').forEach(button => {
                button.classList.remove('selected');
            });
            
            // Add selection to clicked option
            const selectedButton = document.querySelector(`[data-option="${option}"]`);
            if (selectedButton) {
                selectedButton.classList.add('selected');
            }
            
            // Save answer
            saveAnswer(currentQuestion, option);
        }

        // Save answer
        async function saveAnswer(questionNumber, answer) {
            answers[questionNumber] = answer;
            
            try {
                const response = await fetch('/api/submit-answer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        questionNumber: questionNumber,
                        answer: answer
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    updateQuestionIndicators();
                    updateNavigation();
                    
                    // Auto-advance after 2 seconds
                    setTimeout(() => {
                        if (currentQuestion < 30) {
                            nextQuestion();
                        } else {
                            showSubmitButton();
                        }
                    }, 1500);
                }
            } catch (error) {
                console.error('Error saving answer:', error);
            }
        }

        // Navigation functions
        function nextQuestion() {
            if (currentQuestion < 30) {
                currentQuestion++;
                loadQuestion(currentQuestion);
                updateQuestionIndicators();
            }
        }

        function prevQuestion() {
            if (currentQuestion > 1) {
                currentQuestion--;
                loadQuestion(currentQuestion);
                updateQuestionIndicators();
            }
        }

        function goToQuestion(questionNumber) {
            currentQuestion = questionNumber;
            loadQuestion(currentQuestion);
            updateQuestionIndicators();
        }

        // Update navigation buttons
        function updateNavigation() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const submitBtn = document.getElementById('submitTestBtn');
            
            prevBtn.disabled = currentQuestion === 1;
            nextBtn.disabled = !answers[currentQuestion];
            
            if (currentQuestion === 30 && answers[currentQuestion]) {
                showSubmitButton();
            } else {
                submitBtn.style.display = 'none';
            }
        }

        function showSubmitButton() {
            document.getElementById('submitTestBtn').style.display = 'inline-block';
        }

        // Generate question indicators
        function generateQuestionIndicators() {
            const container = document.getElementById('questionIndicators');
            container.innerHTML = '';
            
            for (let i = 1; i <= 30; i++) {
                const indicator = document.createElement('span');
                indicator.className = 'question-indicator';
                indicator.textContent = i;
                indicator.addEventListener('click', () => goToQuestion(i));
                container.appendChild(indicator);
            }
            
            updateQuestionIndicators();
        }

        // Update question indicators
        function updateQuestionIndicators() {
            const indicators = document.querySelectorAll('.question-indicator');
            indicators.forEach((indicator, index) => {
                const questionNum = index + 1;
                indicator.className = 'question-indicator';
                
                if (answers[questionNum]) {
                    indicator.classList.add('answered');
                }
                if (questionNum === currentQuestion) {
                    indicator.classList.add('current');
                }
            });
        }

        // Update UI
        function updateUI() {
            updateQuestionIndicators();
            updateNavigation();
        }

        // Submit test
        async function submitTest() {
            if (confirm('Are you sure you want to submit your test? This action cannot be undone.')) {
                try {
                    clearInterval(timerInterval);
                    
                    const response = await fetch('/api/submit-test', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            answers: answers
                        })
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            window.location.href = '/test-completed';
                        } else {
                            throw new Error(result.error || 'Failed to submit test');
                        }
                    } else {
                        throw new Error('Failed to submit test');
                    }
                } catch (error) {
                    console.error('Error submitting test:', error);
                    alert('Error submitting test. Please try again.');
                }
            }
        }

        // Auto submit when time runs out
        async function autoSubmitTest() {
            try {
                const response = await fetch('/api/submit-test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        answers: answers,
                        autoSubmit: true
                    })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        alert('Time\'s up! Your test has been automatically submitted.');
                        window.location.href = '/test-completed';
                    } else {
                        throw new Error(result.error || 'Failed to auto-submit test');
                    }
                } else {
                    throw new Error('Failed to auto-submit test');
                }
            } catch (error) {
                console.error('Error auto-submitting test:', error);
                alert('Time\'s up but there was an error submitting your test. Please contact support.');
            }
        }

        // Event listeners
        document.getElementById('prevBtn').addEventListener('click', prevQuestion);
        document.getElementById('nextBtn').addEventListener('click', nextQuestion);
        document.getElementById('submitTestBtn').addEventListener('click', submitTest);

        // Prevent accidental page refresh
        window.addEventListener('beforeunload', function(e) {
            if (remainingTime > 0) {
                e.preventDefault();
                e.returnValue = '';
            }
        });
    </script>
</body>
</html> 